#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π API —Å–µ—Ä–≤–µ—Ä –¥–ª—è –ò–ò –∞–≥–µ–Ω—Ç–∞ —Ç–æ—Ä–≥–æ–≤–ª–∏ –Ω–∞ —Ñ—å—é—á–µ—Ä—Å–Ω—ã—Ö —Ä—ã–Ω–∫–∞—Ö
(–±—É–¥–µ—Ç –∑–∞–º–µ–Ω–µ–Ω –Ω–∞ MCP –ø–æ—Å–ª–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π)
"""
import asyncio
import logging
from typing import Any, Dict, List, Optional
import json
from datetime import datetime

from .core.trading_agent import TradingAgent
from .tools.market_data import MarketDataTool
from .core.claude_analyzer import ClaudeMarketAnalyzer
from .core.risk_manager import RiskManager
from .tools.technical_analysis import TechnicalAnalysisTool

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger("trading_ai_server")

class TradingAIServer:
    """–ü—Ä–æ—Å—Ç–æ–π —Å–µ—Ä–≤–µ—Ä –¥–ª—è —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –ò–ò –∞–≥–µ–Ω—Ç–∞"""
    
    def __init__(self):
        self.config: Optional[Dict] = None
        self.trading_agent: Optional[TradingAgent] = None
        self.data_provider: Optional[MarketDataTool] = None
        self.claude_analyzer: Optional[ClaudeMarketAnalyzer] = None
        self.risk_manager: Optional[RiskManager] = None
        self.technical_analyzer: Optional[TechnicalAnalysisTool] = None
    
    async def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–µ—Ä–∞"""
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        try:
            with open('config.json', 'r', encoding='utf-8') as f:
                self.config = json.load(f)
        except FileNotFoundError:
            self.config = {
                "trading": {
                    "initial_balance": 10000,
                    "max_risk_per_trade": 0.02,
                    "trading_pairs": ["BTCUSDT", "ETHUSDT"]
                },
                "exchange": {},
                "ai": {}
            }
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        await self._initialize_components()
        logger.info("–°–µ—Ä–≤–µ—Ä —Ç–æ—Ä–≥–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    async def _initialize_components(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã"""
        if not self.config:
            return
            
        try:
            self.data_provider = MarketDataTool(self.config.get('exchange', {}))
            self.claude_analyzer = ClaudeMarketAnalyzer(self.config.get('ai', {}))
            self.risk_manager = RiskManager(self.config)
            self.technical_analyzer = TechnicalAnalysisTool()
            
            # –°–æ–∑–¥–∞–µ–º —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –∞–≥–µ–Ω—Ç–∞
            agent_config = {
                **self.config.get('trading', {}),
                'exchange': self.config.get('exchange', {}),
                'ai': self.config.get('ai', {})
            }
            self.trading_agent = TradingAgent(agent_config)
            
            logger.info("–ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Ç–æ—Ä–≥–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤: {e}")
            raise
    
    async def get_market_data(self, symbol: str) -> Dict:
        """–ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Ä—ã–Ω–∫–∞"""
        if not self.data_provider:
            raise Exception("–ü–æ—Å—Ç–∞–≤—â–∏–∫ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        
        try:
            async with self.data_provider:
                market_data = await self.data_provider.get_market_data(symbol)
                return market_data
        except Exception as e:
            raise Exception(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Ä—ã–Ω–∫–∞: {e}")
    
    async def analyze_market(self, symbol: str) -> Dict:
        """–ê–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞ —Å –ø–æ–º–æ—â—å—é –ò–ò"""
        if not self.data_provider or not self.claude_analyzer:
            raise Exception("–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä—ã –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ä—ã–Ω–∫–∞
            async with self.data_provider:
                market_data = await self.data_provider.get_market_data(symbol)
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑
            technical_analysis = await self.technical_analyzer.analyze(market_data)
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å –ø–æ–º–æ—â—å—é Claude
            analysis = await self.claude_analyzer.analyze_market(market_data, technical_analysis)
            
            return analysis
        except Exception as e:
            raise Exception(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ä—ã–Ω–∫–∞: {e}")
    
    async def get_technical_analysis(self, symbol: str) -> Dict:
        """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑"""
        if not self.data_provider or not self.technical_analyzer:
            raise Exception("–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä—ã –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ä—ã–Ω–∫–∞
            async with self.data_provider:
                market_data = await self.data_provider.get_market_data(symbol)
            
            # –ü—Ä–æ–≤–æ–¥–∏–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑
            technical_analysis = await self.technical_analyzer.analyze(market_data)
            
            return technical_analysis
        except Exception as e:
            raise Exception(f"–û—à–∏–±–∫–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞: {e}")
    
    async def calculate_position_size(self, symbol: str, entry_price: float, 
                                    stop_loss: float, confidence: float) -> Dict:
        """–†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏"""
        if not self.risk_manager:
            raise Exception("–ú–µ–Ω–µ–¥–∂–µ—Ä —Ä–∏—Å–∫–æ–≤ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        
        try:
            analysis = {
                "entry_price": entry_price,
                "stop_loss": stop_loss,
                "confidence": confidence
            }
            
            market_data = {"symbol": symbol}
            
            position_calc = self.risk_manager.calculate_position_size(analysis, market_data)
            
            return position_calc
        except Exception as e:
            raise Exception(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ —Ä–∞–∑–º–µ—Ä–∞ –ø–æ–∑–∏—Ü–∏–∏: {e}")
    
    async def get_portfolio_summary(self) -> Dict:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–≤–æ–¥–∫—É –ø–æ—Ä—Ç—Ñ–µ–ª—è"""
        if not self.risk_manager:
            raise Exception("–ú–µ–Ω–µ–¥–∂–µ—Ä —Ä–∏—Å–∫–æ–≤ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        
        try:
            portfolio = self.risk_manager.get_portfolio_summary()
            return portfolio
        except Exception as e:
            raise Exception(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–≤–æ–¥–∫–∏ –ø–æ—Ä—Ç—Ñ–µ–ª—è: {e}")
    
    async def execute_trade_decision(self, symbol: str, action: str, size: float,
                                   entry_price: float, stop_loss: float, 
                                   take_profit: float) -> Dict:
        """–í—ã–ø–æ–ª–Ω–∏—Ç—å —Ç–æ—Ä–≥–æ–≤–æ–µ —Ä–µ—à–µ–Ω–∏–µ"""
        if not self.trading_agent:
            raise Exception("–¢–æ—Ä–≥–æ–≤—ã–π –∞–≥–µ–Ω—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        
        try:
            decision = {
                "symbol": symbol,
                "action": action,
                "size": size,
                "entry_price": entry_price,
                "stop_loss": stop_loss,
                "take_profit": take_profit
            }
            
            # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
            risk_amount = abs(entry_price - stop_loss) * size
            potential_profit = abs(take_profit - entry_price) * size
            
            decision.update({
                "risk_amount": risk_amount,
                "potential_profit": potential_profit,
                "risk_reward_ratio": potential_profit / risk_amount if risk_amount > 0 else 0
            })
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º —Å–¥–µ–ª–∫—É
            await self.trading_agent.execute_trade(decision)
            
            result = {
                "status": "executed",
                "decision": decision,
                "timestamp": datetime.now().isoformat()
            }
            
            return result
        except Exception as e:
            raise Exception(f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Ä–µ—à–µ–Ω–∏—è: {e}")
    
    async def configure_system(self, config: Dict) -> str:
        """–ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Å–∏—Å—Ç–µ–º—É"""
        try:
            self.config = config
            await self._initialize_components()
            return "–°–∏—Å—Ç–µ–º–∞ —É—Å–ø–µ—à–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞"
        except Exception as e:
            raise Exception(f"–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã: {e}")

async def main():
    """–ó–∞–ø—É—Å–∫ –ø—Ä–æ—Å—Ç–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞"""
    server_instance = TradingAIServer()
    
    try:
        await server_instance.initialize()
        logger.info("üöÄ –¢–æ—Ä–≥–æ–≤—ã–π –ò–ò —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω")
        
        # –ü—Ä–æ—Å—Ç–∞—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã
        print("üìä –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–π —Å–µ—Ä–≤–µ—Ä–∞:")
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ä—ã–Ω–∫–∞
        market_data = await server_instance.get_market_data("BTCUSDT")
        print(f"‚úÖ –î–∞–Ω–Ω—ã–µ —Ä—ã–Ω–∫–∞ –ø–æ–ª—É—á–µ–Ω—ã: —Ü–µ–Ω–∞ ${market_data.get('current_price', 'N/A')}")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä—ã–Ω–æ–∫
        analysis = await server_instance.analyze_market("BTCUSDT")
        print(f"‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω: {analysis.get('market_sentiment', 'N/A')} –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ")
        
        # –°–≤–æ–¥–∫–∞ –ø–æ—Ä—Ç—Ñ–µ–ª—è
        portfolio = await server_instance.get_portfolio_summary()
        print(f"‚úÖ –ü–æ—Ä—Ç—Ñ–µ–ª—å: –±–∞–ª–∞–Ω—Å ${portfolio.get('balance', 'N/A')}")
        
        print("\nüîÑ –°–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –¥–µ–º–æ-—Ä–µ–∂–∏–º–µ. –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏.")
        
        # –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è —Ä–∞–±–æ—Ç—ã —Å–µ—Ä–≤–µ—Ä–∞
        while True:
            await asyncio.sleep(60)  # –ñ–¥–µ–º –º–∏–Ω—É—Ç—É
            logger.info("–°–µ—Ä–≤–µ—Ä –∞–∫—Ç–∏–≤–µ–Ω...")
            
    except KeyboardInterrupt:
        print("\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ä–∞–±–æ—Ç–µ —Å–µ—Ä–≤–µ—Ä–∞: {e}")
    finally:
        print("üèÅ –°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

if __name__ == "__main__":
    asyncio.run(main())
